- Add option to add a question info popover
- Create a question that is a question with a button to stop the flow with specific value
  something like: 
  {
    value - value to add in DB for ease of knowing
    label - label to display on the button
    color - the color of the button - maybe give a few options...
  }
  Since this stops the flow, add a confirmation modal
- step 2 change to question with button and remove second question
- basically will need a way to create a condition on own value and check those conditions
- add an option to open a modal if a condition on the value is met. 
  (also allow on the length of the inputs like how many selected for multichoice)
  modal with text, badge (danger, warning, info) and buttons. Maybe make
  the buttons generic like they can add anything (hard code the next slide for sure).
  allow to close the modal then add a button next to the question to allow to reopen.
  if the next question is not added to the modal then remove the next question button of the form too
- step 3: Check if possible to add a hoverable body with symptoms
- add a warning under the question when a certain condition is met on own value?













First try at a db schema for the form
// Forms Table
export const formsTable = mysqlTable('forms', {
  form_id: int('form_id').primaryKey().autoincrement(),
  form_name: text('form_name').notNull(),
});


// Form Steps Junction Table
export const formStepsTable = mysqlTable('form_steps', {
  form_id: int('form_id'),
  step_id: int('step_id'),
}, (table) => ({
  pk: primaryKey(table.form_id, table.step_id),
}));

// Steps Table
export const stepsTable = mysqlTable('steps', {
  step_id: int('step_id').primaryKey().autoincrement(),
  step_number: int('step_number').notNull(),
  step_name: text('step_name').notNull(),
});

// Questions Table
export const questionsTable = mysqlTable('questions', {
  question_id: int('question_id').primaryKey().autoincrement(),
  question_type: text('question_type', {
    enum: ["multiple choice", "boolean", "multiple search"]
  }).notNull(),
  step_id: int('step_id').notNull(),
  question_text: text('question_text').notNull(),
});

// Options Table
export const optionsTable = mysqlTable('options', {
  option_id: int('option_id').primaryKey().autoincrement(),
  question_id: int('question_id').notNull(),
  option_text: text('option_text').notNull(),
});

// Answers Table
export const answersTable = mysqlTable('answers', {
  answer_id: int('answer_id').primaryKey().autoincrement(),
  question_id: int('question_id').notNull(),
  answer_boolean: boolean('answer_boolean'), // For boolean questions
  selected_option_id: int('selected_option_id'), // For single choice questions
  answered_at: datetime('answered_at'), // Timestamp for when the answer was given
});